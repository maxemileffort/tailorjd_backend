generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  passwordHash      String
  isSubscribed      Boolean        @default(false)
  isAdmin           Boolean        @default(false)
  creditBalance     Int            @default(5)
  stripeCustomerId  String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  resetToken        String? 
  resetTokenExpiry  DateTime?
  docs              Docs[]
  ActivityLog       ActivityLog[]
  Demographics      Demographics[]
  Sessions          Sessions[]
}

model Demographics {
  id              String  @id @default(uuid())
  userId          String
  f_name          String?
  l_name          String?
  jd_target       String?
  currentIndustry String?
  user            User    @relation(fields: [userId], references: [id])
}

model Docs {
  id             String   @id @default(uuid())
  userId         String
  docType        DocType
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  collectionId   String  
  collection     DocCollection @relation(fields: [collectionId], references: [id])

  user User @relation(fields: [userId], references: [id])
}

model DocCollection {
  id             String   @id @default(uuid())
  analysis       String
  userResume     String
  resumeRewrite  String
  coverLetter    String
  jd             String

  docs           Docs[] 
}

model ActivityLog {
  id           String       @id @default(uuid())
  userId       String?
  action       String
  activityType activityType @default(LOG)
  details      Json?
  createdAt    DateTime     @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model Sessions {
  id          String        @id @default(uuid())
  createdOn   DateTime      @default(now())
  expiry      DateTime 
  token       String
  isActive    Boolean       @default(true)
  userId      String

  user User @relation(fields: [userId], references: [id])
}

enum activityType {
  LOG
  ERROR
  WARNING
}

enum DocType {
  ANALYSIS
  USER_RESUME
  REWRITE_RESUME
  COVER_LETTER
  JD
}